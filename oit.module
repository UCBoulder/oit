<?php

/**
 * @file
 * Module containing custom oit code.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\oit\Plugin\OitImageStyled;
use Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_preprocess_HOOK().
 */
function oit_preprocess_html(&$variables) {
  $theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  if ($theme == 'gin') {
    $title[0] = $variables['head_title']['name'] ?? '';
    $title[1] = '';
    if (isset($variables['head_title']['title'])) {
      $title[1] = is_string($variables['head_title']['title'])?$variables['head_title']['title']:$variables['head_title']['title']->__toString();
    }
    $getEnv = \Drupal::service('oit.environment.icon');
    $variables['head_title'] = $getEnv->getEnv() . ' ' . $title[1] . ' | ' . $title[0];
  }
}

/**
 * Implements hook_webform_access_rules_alter().
 */
function oit_webform_access_rules_alter(array &$access_rules) {
  if (isset($access_rules['create'])) {
    $access_rules['create']['roles'] = ['authenticated'];
  }
}

/**
 * Implements oit_webform_access_rules_alter().
 */
function oit_entity_create(EntityInterface $entity) {
  if ($entity->getEntityType()->getBundleEntityType() == 'node_type' && $entity->getType() == 'webform') {
    // Set access control set to Authenticated.
    $entity->set('field_access_control_2', '475');
  }
}

/**
 * hook_preprocess().
 */
function oit_preprocess(&$variables, $hook) {
  $theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  if ($theme == 'gin') {
    $form_id = $variables['form']['#id'] ?? '';
    $current_path = \Drupal::service('path.current')->getPath();
    if ($current_path == '/node/add') {
      $variables['#attached']['library'][] = 'oit/gingerbread';
    }
    if ($form_id == 'node-tutorial-form' || $form_id == 'node-tutorial-edit-form') {
      $variables['#attached']['library'][] = 'oit/gin_select';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function oit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Set to oit domain on oit site when viewing the content pate.
  if ($form_id == "views_form_content_page_1") {
    $domain = \Drupal::service('oit.domain')->getDomain();
    if ($domain == 'oit') {
      // Get query string.
      $query = \Drupal::request()->query->all();
      $domain_set = FALSE;
      foreach ($query as $key => $value) {
        if ($key == 'field_domain_access_target_id') {
          $domain_set = TRUE;
        }
      }
      if (!$domain_set) {
        // Redirect to query string "field_domain_access_target_id=oit_colorado_edu".
        $query['field_domain_access_target_id'] = 'oit_colorado_edu';
        $query = http_build_query($query);
        $response = new RedirectResponse('/admin/content?' . $query);
        $response->send();
      }
    }
  }

  // Add spacemonkey to search.
  if ($form_id == 'search_form') {
    // Get query string.
    $query = \Drupal::request()->query->all();
    $search_key = isset($query['keys']) ? Xss::filter(strtolower($query['keys'])) : 0;
    $space = [
      'space monkey',
      'space+monkey',
      'spacemonkey',
    ];
    if ($search_key == 'space monkey' || $search_key == 'space+monkey' || $search_key == 'spacemonkey') {
      $form['#attached']['library'][] = 'oit/spacemonkey';
    }
  }

  switch ($form_id) {
    case "node_service_alert_form":
    case "node_service_alert_edit_form":
      // Group for page sub-type extra fields.
      $form['oit_sa_extras'] = [
        '#title' => t('Service Alert Extras'),
        '#type' => 'details',
        '#group' => 'advanced',
        '#open' => 1,
        '#weight' => 100,
      ];
      $form['field_access_control_2']['#group'] = 'oit_sa_extras';
      $form['field_sympa_send']['#group'] = 'options';
      // Death to comments.
      $form['comment_node_service_alert']['#access'] = FALSE;
      // Fill in empty body with template.
      if ($form['body']['widget'][0]['#default_value'] == NULL) {
        $form['body']['widget'][0]['#default_value'] = '<h2>Impact</h2><p></p>
            <h2>Scope</h2><p></p>
            <h2>Affected Services</h2><p></p>
            <h2>Affected Buildings</h2><p></p>
            <h2>For More Information</h2><p></p>
            <h2>Additional Information from Vendor</h2><p></p>
            <h2>Additional Information from UIS</h2><p></p>';
      }
      break;

    case "search_block_form":
      // Set search placeholder on oit.
      $domain = \Drupal::service('oit.domain')->getDomain();
      if ($domain == 'oit') {
        $form['keys']['#attributes']['placeholder'] = t('Search OIT');
      }
      $form['keys']['#attributes']['autocomplete'] = 'off';
      break;

    case "node_page_form":
    case "node_page_edit_form":
      // Group for page sub-type extra fields.
      $form['page_extras'] = [
        '#title' => t('Page Extras'),
        '#type' => 'details',
        '#group' => 'advanced',
        '#open' => 1,
        '#weight' => 100,
      ];
      $form['field_oit_category']['#group'] = 'page_extras';
      $form['field_access_control_2']['#group'] = 'page_extras';
      $form['field_show_child_links']['#group'] = 'page_extras';
      $form['upload']['#group'] = 'page_extras';

      // Private files.
      $form['protected_downloads'] = [
        '#title' => t('Protected Downloads'),
        '#type' => 'details',
        '#group' => 'advanced',
        '#open' => 0,
        '#weight' => 101,
      ];
      $form['field_dl_facstaff']['#group'] = 'protected_downloads';
      $form['field_dl_student']['#group'] = 'protected_downloads';
      $form['field_dl_authenticated']['#group'] = 'protected_downloads';
      // Group for service type.
      $form['type_service'] = [
        '#title' => t('Service'),
        '#type' => 'details',
        '#group' => 'advanced',
        '#open' => 0,
        '#weight' => 102,
      ];
      $form['taxonomy_vocabulary_11']['#group'] = 'type_service';
      $form['field_service_main_page']['#group'] = 'type_service';
      $form['field_services_related']['#group'] = 'type_service';
      $form['field_tut_comp_type_d7']['#group'] = 'type_service';
      $form['field_software_download_link']['#group'] = 'type_service';
      $request = \Drupal::request();
      $request_type = $request->get("type");
      if (isset($request_type)) {
        // Show/hide fields that apply/don't apply to the service type.
        if ($request_type == "service") {
          $form['field_faq']['#access'] = FALSE;
          $form['field_faq_section_title']['#access'] = FALSE;
          $form['type_service']['#open'] = 1;
          $form['body']['widget'][0]['#default_value'] = '<h2>Features</h2><p>Features here.</p><h2>Related Policies</h2><p>Policies here</p><h2>Benefits</h2><p>Benefits here</p><h2>Cost</h2><p>Cost here</p><h2>Who can get it</h2><p>Who can get it here</p><h2>How to get it</h2><p>how to get it here</p><h2>Related Projects</h2><p>related projects here</p>';
          $form['field_oit_category']['widget']['#default_value'][] = 1039;
          $form['taxonomy_vocabulary_11']['widget']['#required'] = TRUE;
          $form['#title'] = t('Create Service Page');
        }
        if ($request_type == "accessibility") {
          $form['field_oit_category']['widget']['#default_value'][] = 847;
          $form['type_service']['#access'] = FALSE;
        }
      }
      $form['#attached']['library'][] = 'oit/oit_clipboard';
      $form['#attached']['library'][] = 'webform/webform.element.select2';
      $form['#attached']['library'][] = 'oit/oit_node_page_form';
      $advanced = sprintf(
        '<details><summary>%s</summary>
        <ul><li><a href="%s" class="edit-button use-ajax" data-dialog-type="dialog" data-dialog-renderer="off_canvas" data-dialog-options="{&quot;width&quot;:400}">%s</a></li><li><a href="%s" target="_blank">%s</a></li><li><a href="%s" target="_blank">%s</a></li></ul>
        <h3>%s</h3>
        <p>%s</p>
        <h3>%s</h3>
        <p>%s</p>
        <p>%s</p>
        <h3>%s</h3>
        <p>%s</p>
        <h3>%s</h3>
        <p>%s</p>
        </details>',
        t('OIT advanced html'),
        '/admin/config/content/shortcode_svg/svg_list',
        t('Icons shortcode panel'),
        'https://curly-umbrella-61336c58.pages.github.io',
        t('Style Guide'),
        '/admin/config/development/asset-injector/js',
        t('Custom js/css (admin only)'),
        t('Flexbox Codez'),
        '<button type="button" class="copy-icon" data-clipboard="flexBox">Copy flexbox</button>',
        t('Details'),
        '<button type="button" class="copy-icon" data-clipboard="details">Copy details element</button>',
        '<button type="button" class="copy-icon" data-clipboard="details-no-deets">Copy details element with class to hide show/hide links</button>',
        t('Columns'),
        '<button type="button" class="copy-icon" data-clipboard="text-cols--3">Copy Columns class</button>',
        t('Shortcode Block embed'),
        '<button type="button" class="copy-icon" data-clipboard="shortcode-block">Copy block shortcode embed</button>',
      );
      $form['oit_advanced'] = [
        '#markup' => $advanced,
        '#weight' => 100,
        '#allowed_tags' => [
          'button',
          'details',
          'summary',
          'ul',
          'li',
          'a',
          'p',
          'h3',
        ],
      ];
      break;

    case "node_news_form":
    case "node_news_edit_form":
      // Group for page sub-type extra fields.
      $form['oit_news_extras'] = [
        '#title' => t('News Extras'),
        '#type' => 'details',
        '#group' => 'advanced',
        '#open' => 1,
        '#weight' => 100,
      ];
      $form['field_oit_category']['#group'] = 'oit_news_extras';
      $form['field_access_control_2']['#group'] = 'oit_news_extras';
      $form['taxonomy_vocabulary_11']['#group'] = 'oit_news_extras';
      $form['field_sympa_send']['#group'] = 'options';
      $form['field_oit_page_file_attatchment']['#group'] = 'oit_news_extras';
      $form['field_oit_news_front_image']['#group'] = 'oit_news_extras';
      $form['field_oit_page_related_content']['#group'] = 'oit_news_extras';
      $form['#attached']['library'][] = 'webform/webform.element.select2';
      $form['#attached']['library'][] = 'oit/oit_node_news_form';
      $form['#validate'][] = 'oit_news_types_categories';
      break;

    case "user_login_form":
      \Drupal::messenger()->deleteAll();
      $config = \Drupal::config('oit.settings');
      $show_login_form = $config->get('show_login_form');
      $form['login_words']['#markup'] = '<div class="login_text"></div>';
      $form['login_words']['#weight'] = -10;
      if (!$show_login_form) {
        $form['#cache'] = ['max-age' => 0];
        $dest_get = Xss::filter(\Drupal::request()->get('destination'));
        $destination = !empty($dest_get) ? '?destination=' . $dest_get : '';
        $response = new RedirectResponse('/saml_login' . $destination, 301);
        $response->send();
        unset($form['name']);
        unset($form['pass']);
        unset($form['actions']);
        $login_text = t('Click below to login');
        $form['login_words']['#markup'] = "<div class='login_text'><p>$login_text</p></div>";
        $form['simplesamlphp_auth_login_link']['#attributes']['class'][] = 'button';
        $form['simplesamlphp_auth_login_link']['#attributes']['class'][] = 'ext';
        $form['#attached']['library'][] = 'oit/gsap';
        return;
      }
      break;

    // Imported from zap_initialize.
    case 'node_webform_form':
    case 'node_webform_edit_form':
      $form['oit_webform_extras'] = [
        '#title' => t('Webform Extras'),
        '#type' => 'details',
        '#group' => 'advanced',
        '#open' => 1,
        '#weight' => 100,
      ];
      $form['field_access_control_2']['#group'] = 'oit_webform_extras';
      $form['field_oit_category']['#group'] = 'oit_webform_extras';
      break;

    case 'node_tutorial_form':
    case 'node_tutorial_edit_form':
      $form['oit_page_extras'] = [
        '#title' => t('Tutorial Extras'),
        '#type' => 'details',
        '#group' => 'advanced',
        '#open' => 1,
        '#weight' => 100,
      ];
      $form['field_access_control_2']['#group'] = 'oit_page_extras';
      $form['field_oit_category']['#group'] = 'oit_page_extras';
      $form['taxonomy_vocabulary_11']['#group'] = 'oit_page_extras';
      $form['field_tut_comp_type_d7']['#group'] = 'oit_page_extras';
      $form['upload']['#group'] = 'oit_page_extras';
      break;
  }
}

/**
 * News form validate.
 */
function oit_news_types_categories(&$form, FormStateInterface $form_state) {
  $hero = $form_state->getValue('field_news_front_image');
  $nope = preg_match_all("/^Decorative photo/i", $hero[0]['alt'], $matches);
  if ($nope) {
    $external_link = Link::fromTextAndUrl(t('Decorative Error Message'), Url::fromUri('https://www.w3.org/WAI/tutorials/images/decorative'))->toString();
    $form_state->setErrorByName('field_news_front_image', $external_link);
  }
  $categories = $form_state->getValue('field_oit_category');
  $parent_cat = [];
  if (isset($categories)) {
    foreach ($categories as $category) {
      $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($category['target_id']);
      $parent_term_id = $term->parent->target_id;
      $parent_cat[] = $parent_term_id;
    }
  }
  $cat_type = '';
  if (!in_array('885', $parent_cat)) {
    $cat_type = 'Service';
  }
  if (!in_array('889', $parent_cat)) {
    if ($cat_type == 'Service') {
      $cat_type .= ' & ';
    }
    $cat_type .= 'News';
  }
  if (!empty($cat_type)) {
    $form_state->setErrorByName('field_oit_category', t('Please select a @type category', ['@type' => $cat_type]));
  }
}

/**
 * Implements hook_token_info().
 */
function oit_token_info() {
  $type = [
    'name' => t('OIT'),
    'description' => t('Custom OIT tokens.'),
  ];
  $node['tweet_pic'] = [
    'name' => t("Twitter Picture"),
    'description' => t('Sets the twitter picture for news/service alerts.'),
  ];
  $node['sa_status'] = [
    'name' => t("Service Alert Status"),
    'description' => t('Set status of the service alert node type.'),
  ];
  $node['sa_title'] = [
    'name' => t("Service Alert Title"),
    'description' => t('Display the service alert title field.'),
  ];
  $node['who_i_is'] = [
    'name' => t("Who I Is"),
    'description' => t('Displays users name.'),
  ];
  return [
    'types' => ['oittoken' => $type],
    'tokens' => ['oittoken' => $node],
  ];
}

/**
 * Implements hook_tokens().
 */
function oit_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'oittoken') {

    foreach ($tokens as $name => $original) {
      // Find the desired token by name.
      switch ($name) {
        case 'who_i_is':
          $user = User::load(\Drupal::currentUser()->id());
          $user_name = $user->get('field_user_name')->getValue()[0]['value'];
          $replacements[$original] = $user_name;
          break;

        case 'tweet_pic':
          if (!empty($data['node'])) {
            $replacements[$original] = '';
            if ($data['node']->getType() == 'news') {
              $sa_image = $data['node']->get('field_news_front_image')->getValue()[0]['target_id'];
              $sa_image_style = new OitImageStyled($sa_image, 'large');
              $sa_image_styled = $sa_image_style->getImageUrl();
              $replacements[$original] = $sa_image_styled;
            }
            if ($data['node']->getType() == 'service_alert' && count($data['node']->get('field_service_dashboard_category')->getValue()) !== 0) {
              $set_dashboard = $data['node']->get('field_service_dashboard_category')->getValue()[0]['value'];
              $translated_dashboard = $set_dashboard - 1;
              $sa_dashboard = [
                'buffportal',
                'canvas',
                'classcap',
                'complab',
                'fedauth',
                'google',
                'grouper',
                'iclicker',
                'identity',
                'kaltura',
                'office365',
                'mycuinfo',
                'network',
                'datacenter',
                'perscap',
                'playposit',
                'proctorio',
                'qualtrics',
                'senses',
                'sympa',
                'turnitin',
                'voicethread',
                'vpn',
                'zoom',
                'other',
              ];
              $twitter_image = "/sites/default/files/sa_images/sa_$sa_dashboard[$translated_dashboard].png";
              $replacements[$original] = $twitter_image;
            }
          }
          break;

        case 'sa_status':
          if (!empty($data['node'])) {
            $sa_status = $data['node']->get('field_service_alert_status')->getValue() !== NULL ? $data['node']->get('field_service_alert_status')->getValue() : '';
            $replacements[$original] = $sa_status[0]['value'];
          }
          break;

        case 'sa_title':
          if (!empty($data['node'])) {
            $sa_title = $data['node']->get('field_service_alert_title')->getValue() !== NULL ? $data['node']->get('field_service_alert_title')->getValue() : '';
            $replacements[$original] = $sa_title[0]['value'];
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_page_attachments_alter().
 */
function oit_page_attachments_alter(array &$attachments) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!is_null($node)) {
    $id = is_string($node) ? $node : $node->id();
    if ($id == 262) {
      $attachments['#attached']['library'][] = 'oit/listjs';
      $attachments['#attached']['library'][] = 'oit/downloads_search';
    }
    if (!is_string($node)) {
      if ($node->getType() == 'tutorial') {
        $attachments['#attached']['library'][] = 'dingo/tutorial';
      }
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function oit_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityType()->getBundleEntityType() == 'node_type' && $entity->getType() == 'webform') {
    if ($webform_id = $entity->get('webform')->getValue()) {
      $webform_id = $webform_id[0]['target_id'];
      $webform = \Drupal::entityTypeManager()->getStorage('webform')->load($webform_id);
      // Report error if webform node is pointing to a deleted webform.
      if ($webform == NULL && $webform_id != 0) {
        \Drupal::service('oit.teamsalert')->sendMessage('Webform no longer exists but is set on node: ' . $entity->id(), ['live']);
        \Drupal::logger('oit')->error('Webform no longer exists but is set on node: ' . $entity->id());
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function oit_cron() {
  $midnight = FALSE;
  if ((date('G', time()) == 00) && (date('i', time()) < 30)) {
    $midnight = TRUE;
  }
  if ($midnight) {
    // Add analytics to redirects.
    \Drupal::service('oit.redirect.add.analytics');
  }
  // Archive news older than 90 days.
  $cut_off = strtotime("-90 days");
  $archivenews = \Drupal::service('oit.archivenews');
  $archivenews->archive($cut_off);
  // Archive service maintenance past completion date.
  \Drupal::service('oit.smc');
}

/**
 * Alter the off-canvas menu tree.
 *
 * @param array $rendered_tree
 *   The built menu tree to be altered. This is provided as a render array.
 */
function oit_responsive_menu_off_canvas_tree_alter(array &$rendered_tree) {
  $feedback = "<a href='mailto:oithelp@colorado.edu' title='email feedback' class='button'>Feedback</a>";
  $close = "<a href='#mm-0' class='button'>close menu</a>";
  $twitter = oit_social_links(t('twitter'), 'http://www.x.com/CUBoulderOIT');
  $facebook = oit_social_links(t('facebook'), 'https://www.facebook.com/CUBoulderOIT');
  $youtube = oit_social_links(t('youtube'), 'https://www.youtube.com/CUBoulderOIT');

  $domain = \Drupal::service('oit.domain')->getDomain();
  if ($domain == 'oit') {
    $rendered_tree['#suffix'] = "<div class='feedback-social'><ul class='feedback-social-inner'><li>$facebook</li><li>$twitter</li><li>$youtube</li><li>$feedback</li><li>$close</li></ul></div>";
  }
}

/**
 * Create social link.
 */
function oit_social_links($title, $url) {
  return "<a class='social-icon $title' title='$title' href='$url'><img alt='' src='/themes/custom/dingo/images/icons/$title.svg'></a>";
}

/**
 * Implements hook_entity_presave().
 */
function oit_entity_presave(EntityInterface $entity) {
  if (method_exists($entity, 'getType')) {
    if ($entity->getType() == 'news') {
      oit_news_update($entity);
    }
    if ($entity->getType() == 'service_alert') {
      oit_servicealert_update($entity);
    }
    // Allows for clearing of blocks based on node type.
    $tags = ['node_type:' . $entity->getType()];
    Cache::invalidateTags($tags);
  }
  // Set image alt.
  if (method_exists($entity, 'bundle')) {
    if ($entity->bundle() == 'pictures') {
      $entity->field_finished_picture->alt = $entity->get('title')->value;
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function oit_entity_delete(EntityInterface $entity) {
  if (method_exists($entity, 'getType')) {
    // Allows for clearing of blocks based on node type.
    $tags = ['node_type:' . $entity->getType()];
    Cache::invalidateTags($tags);
  }
}

/**
 * Set twitter meta image and set unpublish date.
 */
function oit_news_update($entity) {
  $meta_info = json_decode($entity->get('field_meta_tags')->getValue()[0]['value']) ?? [];
  if (!isset($meta_info->twitter_cards_image) || !isset($meta_info->og_image)) {
    $image_id = $entity->get('field_news_front_image')->getValue()[0]['target_id'];
    $image_style = new OitImageStyled($image_id, 'large', 'front_news');
    $image_styled = $image_style->getImageUrl();
    if ($image_styled && (!isset($meta_info->twitter_cards_image) || $meta_info->twitter_cards_image != NULL)) {
      $meta_info['twitter_cards_image'] = $image_styled;
    }
    if ($image_styled && (!isset($meta_info->og_image) || $meta_info->og_image != NULL)) {
      $meta_info['og_image'] = $image_styled;
    }
    $meta_serial = json_encode($meta_info);
    $entity->set('field_meta_tags', $meta_serial);
  }
  if ($entity->getType() == 'news' && $entity->get('field_news_archive')->getValue()[0]['value'] == 2) {
    $entity->set('unpublish_on', strtotime("100 days"));
  }
}

/**
 * Set twitter image and dashboard ordering.
 */
function oit_servicealert_update($entity) {
  $meta_info = json_decode($entity->get('field_meta_tags')->getValue()[0]['value']) ?? [];
  if ((!isset($meta_info->twitter_cards_image) || !isset($meta_info->og_image)) && $entity->get('field_service_dashboard_category')) {
    $meta_info["twitter_cards_type"] = "summary";
    $set_dashboard = $entity->get('field_service_dashboard_category')->getValue()[0]['value'];
    $translated_dashboard = $set_dashboard - 1;
    $sa_dashboard = [
      'buffportal',
      'canvas',
      'classcap',
      'complab',
      'fedauth',
      'google',
      'grouper',
      'iclicker',
      'identity',
      'kaltura',
      'office365',
      'mycuinfo',
      'network',
      'datacenter',
      'perscap',
      'playposit',
      'proctorio',
      'qualtrics',
      'senses',
      'sympa',
      'turnitin',
      'voicethread',
      'vpn',
      'zoom',
      'other',
    ];
    $host = \Drupal::request()->getSchemeAndHttpHost();
    $social_image = "$host/sites/default/files/sa_images/sa_$sa_dashboard[$translated_dashboard].png";
    $meta = [];
    if (!isset($meta_info->twitter_cards_image) || $meta_info->twitter_cards_image != NULL) {
      $meta['twitter_cards_image'] = $social_image;
    }
    else {
      $meta['twitter_cards_image'] = $meta_info->twitter_cards_image;
    }
    if (!isset($meta_info->og_image) || $meta_info->og_image != NULL) {
      $meta['og_image'] = $social_image;
    }
    else {
      $meta['og_image'] = $meta_info->og_image;
    }
    $meta_serial = serialize($meta);
    $entity->set('field_meta_tags', $meta_serial);
  }
}

/**
 * Implements hook_menu().
 */
function oit_menu() {
  $items['front'] = [
    'title' => 'Office of Information Technology',
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function oit_menu_local_tasks_alter(&$data, $route_name) {
  if ($route_name == 'user.login') {
    $data['tabs'][0]['user.pass']['#access'] = FALSE;
  }
}

/**
 * Implements hook_block_access().
 */
function oit_block_access(Block $block, $operation, AccountInterface $account) {
  // Forbid access to unpublished block on published nodes.
  if ($block->getPluginId() == 'block_content:b64c8b8f-40f5-492b-9cd9-4261baee0cfd') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
      if ($node->isPublished()) {
        return AccessResult::forbidden();
      }
    }
  }
  if ($block->id() == 'mainnavigation') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!is_string($node) && isset($node)) {
      if ($node->bundle() == 'page') {
        $child = $node->get('field_show_child_links')->getValue();
        if (!$child[0]['value']) {
          return AccessResult::forbiddenIf(TRUE)->addCacheableDependency($block);
        }
      }
    }
  }
}
